<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Github Action部署</title>
    <link href="/posts/5ca50815/"/>
    <url>/posts/5ca50815/</url>
    
    <content type="html"><![CDATA[<blockquote><p>写在最前：参考自大佬的笔记<a href="https://akilar.top/posts/7c16c4bb/">Hexo博客优化蓝图 | Akilarの糖果屋</a>，自己跟着流程走了一遍，然后把自己遇到的问题也补上，供新配置的同学参考。</p></blockquote><h2 id="Github-Action简介"><a href="#Github-Action简介" class="headerlink" title="Github Action简介"></a>Github Action简介</h2><p><a href="https://github.com/features/actions">Github Action</a>是 GitHub于2018年10月推出的一个CI\CD服务。</p><blockquote><p>CI\CD 其实说的是三件事情：「持续集成（<code>Continuous Integration</code>）」、「持续交付（<code>Continuous Delivery</code>）」、「持续部署（<code>Continuous Deployment</code>）」。<br>因为「持续交付」和「持续部署」的英文缩写是一样的，所以这三件事情缩写成了 <code>CI\CD</code> 。</p></blockquote><p><strong>每次部署<code>Hexo</code>都需要运行指令三件套，随着文章越来越多，编译的时间也随之越来越长，通过<code>Github Action</code>，我们只需要在每次完成博客的编写或修改以后，将改动直接<code>push</code>到远程仓库，之后的编译部署的工作统统交给<code>CI</code>来完成即可，如果是看过<a href="https://akilar.top/posts/54c08a4b/">Coding部署教程</a>的小伙伴，应该对这种持续部署的操作有所感触。</strong></p><h2 id="教程常量声明"><a href="#教程常量声明" class="headerlink" title="教程常量声明"></a>教程常量声明</h2><div class="table-container"><table><thead><tr><th style="text-align:left">常量名</th><th style="text-align:left">常量释义</th></tr></thead><tbody><tr><td style="text-align:left"><strong>[Blogroot]</strong></td><td style="text-align:left">本地存放博客源码的文件夹路径</td></tr><tr><td style="text-align:left"><strong>[SourceRepo]</strong></td><td style="text-align:left">存放博客源码的私有仓库名</td></tr><tr><td style="text-align:left"><strong>[SiteBlogRepo]</strong></td><td style="text-align:left">存放编译好的博客页面的公有仓库名 Site指站点，教程中会替换成 Github、Gitee、Coding</td></tr><tr><td style="text-align:left"><strong>[SiteUsername]</strong></td><td style="text-align:left">用户名     Site指站点，教程中会替换成 Github、Gitee、Coding</td></tr><tr><td style="text-align:left"><strong>[SiteToken]</strong></td><td style="text-align:left">申请到的令牌码     Site指站点，教程中会替换成 Github、Gitee、Coding</td></tr><tr><td style="text-align:left"><strong>[GithubEmail]</strong></td><td style="text-align:left">与github绑定的主邮箱，建议使用Gmail</td></tr><tr><td style="text-align:left"><strong>[TokenUser]</strong></td><td style="text-align:left">Coding配置特有的令牌用户名</td></tr></tbody></table></div><figure class="highlight angelscript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"># 在记事本中逐个记录，方便替换，以下为我的示例<br><span class="hljs-string"></span><br><span class="hljs-string">[Blogroot]</span>：E:\Hexo<br><span class="hljs-string"></span><br><span class="hljs-string">[SourceRepo]</span>：<span class="hljs-number">7</span>dragonpig/blog-source<br><span class="hljs-string"></span><br><span class="hljs-string">[SiteBlogRepo]</span><br><span class="hljs-string">  [GithubBlogRepo]</span>：<span class="hljs-number">7</span>dragonpig.github.io<br><span class="hljs-string">  [GiteeBlogRepo]</span>：<br><span class="hljs-string">  [CodingBlogRepo]</span>：akilar/akilar<br><span class="hljs-string"></span><br><span class="hljs-string">[SiteUsername]</span><br><span class="hljs-string">  [GithubUsername]</span>：<span class="hljs-number">7</span>dragonpig<br><span class="hljs-string">  [GiteeUsername]</span>：Akilar<br><span class="hljs-string">  [CodingUsername]</span>：akilar<br><span class="hljs-string"></span><br><span class="hljs-string">[SiteToken]</span><br><span class="hljs-string">  [GithubToken]</span>：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<br><span class="hljs-string">  [GiteeToken]</span>：f57acasdadgar4578603adas5d8w79bb<br><span class="hljs-string">  [CodingToken]</span>：a4e45daf78as1f2670dcbbcfd5as7d8asd8cd66a77<br><span class="hljs-string"></span><br><span class="hljs-string">[GithubEmail]</span>：<span class="hljs-symbol">1242981216@</span>qq.com<br><span class="hljs-string"></span><br><span class="hljs-string">[TokenUser]</span>：RAxDiobbRi <br></code></pre></td></tr></tbody></table></figure><h2 id="Github-Action使用教程"><a href="#Github-Action使用教程" class="headerlink" title="Github Action使用教程"></a>Github Action使用教程</h2><h3 id="1-获取Token"><a href="#1-获取Token" class="headerlink" title="1. 获取Token"></a>1. 获取Token</h3><p>为了确保交由<code>Github Action</code>来持续部署时，<code>Github Action</code>具备足够的权限来进行<code>hexo deploy</code>操作,需要先获取<code>Token</code>.</p><h3 id="2-创建存放源码的私有仓库"><a href="#2-创建存放源码的私有仓库" class="headerlink" title="2.创建存放源码的私有仓库"></a>2.创建存放源码的私有仓库</h3><p>我们需要创建一个用来存放<code>Hexo</code>博客源码的私有仓库<code>[SourceRepo]</code>.</p><p><img src="https://cdn.jsdelivr.net/gh/7dragonpig/PicGo@main/Pic/202405020009247.png" alt="image-20240428171345017"></p><p><strong>创建时什么多余的操作都不要做，不用创建readme文件</strong></p><p>创建完成后，需要把博客的源码<code>push</code>到这里。步骤：</p><ul><li><p>在<code>[Blogroot]</code>路径下右键-&gt;Git Bash Here，输入<strong>git init     # 初始化git</strong></p><p>这一步会在你的博客目录下新建一个<code>.git</code>文件夹。因为是隐藏文件夹，所以需要你先确保当前目录下隐藏文件夹可见才能看到它。</p><p>在远端提交前，我们需要先调整一下屏蔽项，能够使用指令进行安装的内容不包括在需要提交的源码内，这样可以显著减少需要提交的文件量和加快提交速度。打开<code>[Blogroot]/.gitignore</code>（也是隐藏文件）,输入以下内容：</p><figure class="highlight txt"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs txt">.DS_Store<br>Thumbs.db<br>db.json<br>*.log<br>node_modules/<br>public/<br>.deploy*/<br>.deploy_git*/<br>.idea<br>themes/butterfly/.git   //替换最后一行内容为你自己当前使用的主题。<br></code></pre></td></tr></tbody></table></figure><ul><li>然后尝试第一次提交你的目录到远程仓库,依然是在<code>[Blogroot]</code>路径下右键-&gt;Git Bash Here，输入：</li></ul></li></ul><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs ymal">git add .           # 添加文件到本地仓库<br>git commit -m "自定义内容即可"          # 添加文件描述信息<br>git remote add origin git@github.com:7dragonpig/HEXO.git     #链接远程仓库地址，创建主分支<br># 要是提示origin已经存在，那么执行<br>git remote rm origin   <br># 然后再重新尝试  git remote add origin git@github.com:7dragonpig/HEXO.git<br><br>git pull origin YourBranchName # 把远程仓库的新增的内容覆盖到本地仓库<br><br>git push -u origin main -f<br></code></pre></td></tr></tbody></table></figure><h3 id="3-配置Github-Action"><a href="#3-配置Github-Action" class="headerlink" title="3. 配置Github Action"></a>3. 配置Github Action</h3><ol><li>在<code>[Blogroot]</code>新建<code>.github</code>文件夹,注意开头是有个<code>.</code>的。然后在<code>.github</code>内新建<code>workflows</code>文件夹，再在<code>workflows</code>文件夹内新建<code>autodeploy.yml</code>,在<code>[Blogroot]/.github/workflows/autodeploy.yml</code>里面输入</li></ol><figure class="highlight handlebars"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"># 当有改动推送到master分支时，启动Action</span><br><span class="language-xml">name: 自动部署</span><br><span class="language-xml"></span><br><span class="language-xml">on:</span><br><span class="language-xml">  push:</span><br><span class="language-xml">    branches:</span><br><span class="language-xml">      - main #2020年10月后github新建仓库默认分支改为main，注意更改</span><br><span class="language-xml"></span><br><span class="language-xml">  release:</span><br><span class="language-xml">    types:</span><br><span class="language-xml">      - published</span><br><span class="language-xml"></span><br><span class="language-xml">jobs:</span><br><span class="language-xml">  deploy:</span><br><span class="language-xml">    runs-on: ubuntu-latest</span><br><span class="language-xml">    steps:</span><br><span class="language-xml">    - name: 检查分支</span><br><span class="language-xml">      uses: actions/checkout@v4</span><br><span class="language-xml">      with:</span><br><span class="language-xml">        ref: main #2020年10月后github新建仓库默认分支改为main，注意更改</span><br><span class="language-xml"></span><br><span class="language-xml">    - name: 安装 Node</span><br><span class="language-xml">      uses: actions/setup-node@v4</span><br><span class="language-xml">      with:</span><br><span class="language-xml">        node-version: "22.0" #action使用的node版本，建议大版本和本地保持一致。可以在本地用node -v查询版本号。</span><br><span class="language-xml"></span><br><span class="language-xml">    - name: 安装 Hexo</span><br><span class="language-xml">      run: |</span><br><span class="language-xml">        export TZ='Asia/Shanghai'</span><br><span class="language-xml">        npm install hexo-cli -g</span><br><span class="language-xml"></span><br><span class="language-xml">    - name: 缓存 Hexo</span><br><span class="language-xml">      uses: actions/cache@v4</span><br><span class="language-xml">      id: cache</span><br><span class="language-xml">      with:</span><br><span class="language-xml">        path: node_modules</span><br><span class="language-xml">        key: $</span><span class="hljs-template-variable">{{<span class="hljs-name">runner.OS</span>}}</span><span class="language-xml">-$</span><span class="hljs-template-variable">{{<span class="hljs-name">hashFiles</span>(<span class="hljs-name">'**/package-lock.json'</span>)}}</span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml">    - name: 安装依赖</span><br><span class="language-xml">      if: steps.cache.outputs.cache-hit != 'true'</span><br><span class="language-xml">      run: |</span><br><span class="language-xml">        npm install --save</span><br><span class="language-xml"></span><br><span class="language-xml">    - name: 生成静态文件</span><br><span class="language-xml">      run: |</span><br><span class="language-xml">        hexo clean</span><br><span class="language-xml">        hexo generate</span><br><span class="language-xml"></span><br><span class="language-xml">    - name: 部署 #此处master:master 指从本地的master分支提交到远程仓库的master分支，若远程仓库没有对应分支则新建一个。如有其他需要，可以根据自己的需求更改。</span><br><span class="language-xml">      run: |</span><br><span class="language-xml">        cd ./public</span><br><span class="language-xml">        git init</span><br><span class="language-xml">        git config --global user.name '$</span><span class="hljs-template-variable">{{ <span class="hljs-name">secrets.GITHUBUSERNAME</span> }}</span><span class="language-xml">'</span><br><span class="language-xml">        git config --global user.email '$</span><span class="hljs-template-variable">{{ <span class="hljs-name">secrets.GITHUBEMAIL</span> }}</span><span class="language-xml">'</span><br><span class="language-xml">        git add .</span><br><span class="language-xml">        git commit -m "$</span><span class="hljs-template-variable">{{ <span class="hljs-name">github.event.head_commit.message</span> }}</span><span class="language-xml"> $(date +"%Z %Y-%m-%d %A %H:%M:%S") Updated By Github Actions"</span><br><span class="language-xml">        git push --force --quiet "https://$</span><span class="hljs-template-variable">{{ <span class="hljs-name">secrets.GITHUBUSERNAME</span> }}</span><span class="language-xml">:$</span><span class="hljs-template-variable">{{ <span class="hljs-name">secrets.GITHUBTOKEN</span> }}</span><span class="language-xml">@github.com/$</span><span class="hljs-template-variable">{{ <span class="hljs-name">secrets.GITHUBUSERNAME</span> }}</span><span class="language-xml">/$</span><span class="hljs-template-variable">{{ <span class="hljs-name">secrets.GITHUBUSERNAME</span> }}</span><span class="language-xml">.github.io.git" master:main</span><br><span class="language-xml">        #git push --force --quiet "https://$</span><span class="hljs-template-variable">{{ <span class="hljs-name">secrets.TOKENUSER</span> }}</span><span class="language-xml">:$</span><span class="hljs-template-variable">{{ <span class="hljs-name">secrets.CODINGTOKEN</span> }}</span><span class="language-xml">@e.coding.net/$</span><span class="hljs-template-variable">{{ <span class="hljs-name">secrets.CODINGUSERNAME</span> }}</span><span class="language-xml">/$</span><span class="hljs-template-variable">{{  <span class="hljs-name">secrets.CODINGBLOGREPO</span> }}</span><span class="language-xml">.git" master:main </span><br><span class="language-xml">        #coding部署写法，需要的自行取消注释</span><br><span class="language-xml">        #git push --force --quiet "https://$</span><span class="hljs-template-variable">{{ <span class="hljs-name">secrets.GITEEUSERNAME</span> }}</span><span class="language-xml">:$</span><span class="hljs-template-variable">{{ <span class="hljs-name">secrets.GITEETOKEN</span> }}</span><span class="language-xml">@gitee.com/$</span><span class="hljs-template-variable">{{ <span class="hljs-name">secrets.GITEEUSERNAME</span> }}</span><span class="language-xml">/$</span><span class="hljs-template-variable">{{ <span class="hljs-name">secrets.GITEEUSERNAME</span> }}</span><span class="language-xml">.git" master:master #gitee部署写法，需要的自行取消注释</span><br></code></pre></td></tr></tbody></table></figure><p>中间有一步报了错，导致后面的deploy失败。  问题出在<code>uses: actions/checkout@v2</code>中的</p><p><img src="https://cdn.jsdelivr.net/gh/7dragonpig/PicGo@main/Pic/202405020009122.png" alt="image-20240428172801103"></p><p>这里一定要写<strong>master main</strong>，因为public文件夹下默认分支就是<strong>maser</strong></p><p><img src="https://cdn.jsdelivr.net/gh/7dragonpig/PicGo@main/Pic/202404281729061.png" alt="image-20240428172917988"></p><p>然后warning是说node在2023.9的版本问题，我直接把<strong>checkout@v2都改成v4</strong>，然后就没报错了。</p><p><img src="https://cdn.jsdelivr.net/gh/7dragonpig/PicGo@main/Pic/202405020009767.png" alt="image-20240428173030570"></p><ol><li><p>之后需要自己到仓库的Settings-&gt;Secrets-&gt;actions 下添加环境变量，变量名参考脚本中出现的，依次添加。</p><p><img src="https://cdn.jsdelivr.net/gh/7dragonpig/PicGo@main/Pic/202405020009491.png" alt=""></p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/7dragonpig/PicGo@main/Pic/202404281732604.png" alt="image-20240428173253503"></p><p>需要部署在githubpage上，那么脚本中必要的变量为<br><code>GITHUBUSERNAME</code>、<code>GITHUBEMAIL</code>、<code>GITHUBTOKEN</code>，因此添加这三条变量。变量具体内容释义可以查看本文开头。</p><p><img src="https://cdn.jsdelivr.net/gh/7dragonpig/PicGo@main/Pic/202405020009112.png" alt="image-20240428173319538"></p><ol><li><h3 id="重新设置远程仓库和分支"><a href="#重新设置远程仓库和分支" class="headerlink" title="重新设置远程仓库和分支"></a>重新设置远程仓库和分支</h3></li></ol><p>在博客根目录<code>[Blogroot]</code>路径下运行指令</p><figure class="highlight nginx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">git</span> remote add origin git<span class="hljs-variable">@github</span>.com:7dragonpig/HEXO.git <span class="hljs-comment">#[SourceRepo]为存放源码的github私有仓库</span><br><br>git checkout -b main <span class="hljs-comment"># 切换到main分支，</span><br></code></pre></td></tr></tbody></table></figure><ol><li><p>之后再运行git提交指令，将博客源码提交到github上。</p><p><strong>牢记下方的三行指令，以后都是通过这个指令进行提交，可以写成一个脚本，真正的一键部署。</strong></p><figure class="highlight avrasm"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">git <span class="hljs-keyword">add</span> .<br>git commit -m <span class="hljs-string">"填date: 如2024/4/28"</span> <span class="hljs-meta">#引号内的内容可以自行更改作为提交记录。</span><br>git <span class="hljs-keyword">push</span> origin main<br></code></pre></td></tr></tbody></table></figure></li></ol><h2 id="查看部署情况"><a href="#查看部署情况" class="headerlink" title="查看部署情况"></a>查看部署情况</h2><p>此时，打开GIthub存放源码的私有仓库（或者VScode的action插件），找到action。</p><p><img src="https://cdn.jsdelivr.net/gh/7dragonpig/PicGo@main/Pic/202405020009885.png" alt="image-20240428173940008"></p><p>根据刚刚的Commit记录找到相应的任务，点击Deploy查看部署情况，若全部打钩，恭喜你，你现在可以享受自动部署的快感了。</p><p><img src="https://cdn.jsdelivr.net/gh/7dragonpig/PicGo@main/Pic/202405020009574.png" alt="image-20240428174033747"></p><h3 id="中间遇到的错误"><a href="#中间遇到的错误" class="headerlink" title="中间遇到的错误"></a>中间遇到的错误</h3><ol><li>报了安全问题，进入打框的网站，把<em>*</em>改成自己的用户名就ok，然后给与访问权限就ok。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/7dragonpig/PicGo@main/Pic/202405020009846.png" alt="image-20240429013904362"></p><p><img src="https://cdn.jsdelivr.net/gh/7dragonpig/PicGo@main/Pic/202405020009330.png" alt="image-20240429013753624"></p><ol><li><p>会遇到warning，大概是提醒包的版本问题，我这里全部换成v4就没有再报了。如图：</p><p><img src="https://cdn.jsdelivr.net/gh/7dragonpig/PicGo@main/Pic/202405020003060.png" alt="image-20240502000338966"></p></li><li><p>如果遇到有时成功有时失败的情况，重新连接远程仓库试试，即执行这六句，应该会有奇效。我猜失败的原因可能是关了电脑，然后连接被换成github.io仓库了？</p><p><img src="https://cdn.jsdelivr.net/gh/7dragonpig/PicGo@main/Pic/202405020009522.png" alt="image-20240502000614261"></p><p>我也很郁闷，哈哈。。。。然后试了试重新连接仓库分支，后面就没报过错了。</p><p><img src="https://cdn.jsdelivr.net/gh/7dragonpig/PicGo@main/Pic/202405020005726.png" alt="image-20240502000518585"></p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/7dragonpig/PicGo@main/Pic/202405020009613.png" alt="image-20240502000719721"></p>]]></content>
    
    
    <categories>
      
      <category>踩坑日记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《learn to count everything》论文阅读</title>
    <link href="/posts/ee8cc168/"/>
    <url>/posts/ee8cc168/</url>
    
    <content type="html"><![CDATA[<h1 id="《learn-to-count-everything》论文阅读"><a href="#《learn-to-count-everything》论文阅读" class="headerlink" title="《learn to count everything》论文阅读"></a>《learn to count everything》论文阅读</h1><blockquote><p>模式识别这门课最后选了这篇论文汇报，记录一下吧。</p></blockquote><p>参考资料：</p><p><a href="https://www.bilibili.com/video/BV1Aw411z7nn/?spm_id_from=333.337.search-card.all.click&amp;vd_source=a364a95783516dba0cc97552f4f895d8">【论文解读】CVPR2021 | FamNet：密集场景计数统计实战 Learning To Count Everything（图像处理|计算机视觉|人工智能）_哔哩哔哩_bilibili</a></p><p><a href="https://zhuanlan.zhihu.com/p/685255991">CVPR 2021 | FamNet | Learning To Count Everything - 知乎 (zhihu.com)</a></p><p><img src="https://cdn.jsdelivr.net/gh/7dragonpig/PicGo@main/Pic/202405012312522.png" alt="image-20240501231246362"></p><p>本篇论文完成了小样本新类别密集计数任务，给出少量的样本标签即可，是一种半监督的任务。Few-Shot：只给出少量的标签，让模型自己学习，让模型的通用性更强。在本文中，few-shot实现的是：输入为一张图像以及一些标注信息，这些标注信息是少量的目标物体样例，使用方框标注。输出是一张“密度图”，预测和原图同位置的地方是否有目标。最后对密度图做一个求和操作。</p><h3 id="1-本文创新点："><a href="#1-本文创新点：" class="headerlink" title="1.本文创新点："></a>1.本文创新点：</h3><ol><li>将计数看成是few-shot回归任务。</li><li>构建了一种新的网络结构FamNet 少样本适应和匹配性网络。</li><li>在测试时采用了一种新的自适应方案，进一步提高了FamNet的性能。</li><li>提供了一个新的数据集Few-Shot Counting-147（FSC-147）。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/7dragonpig/PicGo@main/Pic/202405012315061.png" alt="image-20240501231521962"></p><h3 id="2-主要结构"><a href="#2-主要结构" class="headerlink" title="2.主要结构"></a>2.主要结构</h3><p><img src="https://cdn.jsdelivr.net/gh/7dragonpig/PicGo@main/Pic/202405012316458.png" alt="image-20240501231653334"></p><ol><li>Feature Extraction Module：特征提取模块。使用ImageNet预训练的网络进行特征提取。多由预先训练好的ResNet-50骨干网的前四个块组成（这些块的参数在训练期间被冻结），通过第三和第四块的卷积特征图来表示一幅图像。</li><li>ROI Pool ：只针对关注区域的特征找到特征图。把样例的特征图做上采样或者下采样，然后进行拼接。</li><li>Feature Correlation Layer：特征相关层。为了使密度预测模块对视觉类别不可知，不直接使用从特征提取模块获得的特征进行密度预测。只使用不同scale的样例特征和整个图像特征之间的相关性获得相关图，作为密度预测模块的输入。</li><li>Density Prediction Module：密度预测模块。由五个卷积块和放置在第一、第二和第三卷积层之后的三个上采样层组成。最后一层是 1×1 卷积层预测 2D 密度图。</li></ol><h3 id="3-训练（训练集下载见github地址，不大）"><a href="#3-训练（训练集下载见github地址，不大）" class="headerlink" title="3.训练（训练集下载见github地址，不大）"></a>3.训练（训练集下载见github地址，不大）</h3><p>FSC-147。由6135张图像组成，涉及147个对象类别。数据集中的对象的大小和计数差异很大，7-3731个对象，平均每幅图像的计数为56个对象。</p><p><img src="https://cdn.jsdelivr.net/gh/7dragonpig/PicGo@main/Pic/202405012324356.png" alt="image-20240418221759026"></p><blockquote><p>为了生成目标密度图，使用具有自适应窗口大小的高斯平滑法。首先，使用点注释来估计物体的大小。点注释图每个点都位于物体的近似中心，计算每个点与其最近的邻居的距离，对图像中所有的点进行平均，平均距离被用作生成目标密度图的高斯窗口的大小。高斯的标准偏差被设定为窗口大小的四分之一。为了训练FamNet，将预测的密度图和GT密度图之间的平均平方误差降到最低。使用Adam优化器，学习率为1e-5，批次大小为1。每张图片的大小调整为固定的384高度，宽度也相应调整保持原始纵横比。</p></blockquote><h3 id="4-测试适应"><a href="#4-测试适应" class="headerlink" title="4.测试适应"></a>4.测试适应</h3><p>参数微调：在测试时要先“热身，使网络更适应于当前的目标类别，要做某一个类别，先做100次迭代，更新参数。同时，在测试时选择了两个在训练的时候没有的损失函数。其关键思想是利用范例边界框的位置所提供的信息。</p><p>第一个是Min-count Loss，要求在密度图的原图样例位置，方框内密度值求和至少大于等于1，否则损失就很大。</p><p><img src="https://cdn.jsdelivr.net/gh/7dragonpig/PicGo@main/Pic/202405012319549.png" alt="image-20240501231958490"></p><p>第二个是Perturbation Loss，将方框的中心视作密度值为1，周围的密度值呈高斯分布，离中心位置越远密度值越小。损失函数定义为预测值与中心点的距离（或者说预测密度值与所在位置的实际密度值之差）的平方和。</p><p><img src="https://cdn.jsdelivr.net/gh/7dragonpig/PicGo@main/Pic/202405012320185.png" alt="image-20240501232043129"></p><p>The combined adaptation Loss.用于测试时间自适应的损失是MinCount损失和扰动损失的加权组合。</p><p><img src="https://cdn.jsdelivr.net/gh/7dragonpig/PicGo@main/Pic/202405012321626.png" alt="image-20240501232108538"></p><h3 id="5-有无自适应的测试效果"><a href="#5-有无自适应的测试效果" class="headerlink" title="5.有无自适应的测试效果"></a>5.有无自适应的测试效果</h3><p>1.预测的密度图和FamNet的计数。</p><p><img src="https://cdn.jsdelivr.net/gh/7dragonpig/PicGo@main/Pic/202405012322928.png" alt="image-20240501232204773"></p><p>2.测试时自适应。显示的是初始密度图（Pre Adapt）和适应后的最终密度图（Post Adapt）。在过度计数的情况下，适应性降低了密集位置的密度值。</p><p><img src="https://cdn.jsdelivr.net/gh/7dragonpig/PicGo@main/Pic/202405012322095.png" alt="image-20240501232212011"></p><h3 id="6-实验结果"><a href="#6-实验结果" class="headerlink" title="6.实验结果"></a>6.实验结果</h3><p>度量标准：均值绝对误差MAE、均方误差RMSE</p><p><img src="https://cdn.jsdelivr.net/gh/7dragonpig/PicGo@main/Pic/202405012322224.png" alt="image-20240501232245172"></p><p><img src="https://cdn.jsdelivr.net/gh/7dragonpig/PicGo@main/Pic/202405012323284.png" alt="image-20240501232342226"></p><p>1.与其他少样本方法的比较</p><p><img src="https://cdn.jsdelivr.net/gh/7dragonpig/PicGo@main/Pic/202405012326781.png" alt="image-20240501232625711"></p><p>2.相比于目标检测的方法</p><p><img src="https://cdn.jsdelivr.net/gh/7dragonpig/PicGo@main/Pic/202405012326924.png" alt="image-20240501232637860"></p><p>3.消融实验</p><p><img src="https://cdn.jsdelivr.net/gh/7dragonpig/PicGo@main/Pic/202405012326141.png" alt="image-20240501232658090"></p><p><img src="https://cdn.jsdelivr.net/gh/7dragonpig/PicGo@main/Pic/202405012327952.png" alt="image-20240501232703896"></p><p>4.特定类别的目标计数</p><p><img src="https://cdn.jsdelivr.net/gh/7dragonpig/PicGo@main/Pic/202405012327532.png" alt="image-20240501232719467"></p><h1 id="实验过程及结果"><a href="#实验过程及结果" class="headerlink" title="实验过程及结果"></a>实验过程及结果</h1><h3 id="1-demo测试："><a href="#1-demo测试：" class="headerlink" title="1.demo测试："></a>1.demo测试：</h3><p><img src="https://cdn.jsdelivr.net/gh/7dragonpig/PicGo@main/Pic/202404231533977.png" alt="image-20240417170921528"></p><p>原图应该共有36个橘子，无适应测试结果是29.15，有适应的结果是30.05，略有改善。</p><p><img src="https://cdn.jsdelivr.net/gh/7dragonpig/PicGo@main/Pic/202404231533218.jpg" alt="orange"></p><p><img src="https://cdn.jsdelivr.net/gh/7dragonpig/PicGo@main/Pic/202404231536091.png" alt="image-20240423022344126"></p><p><img src="https://cdn.jsdelivr.net/gh/7dragonpig/PicGo@main/Pic/202405012329488.png" alt="image-20240501232908425"></p><h4 id="换example-box再测试："><a href="#换example-box再测试：" class="headerlink" title="换example box再测试："></a>换example box再测试：</h4><p>特地挑了几个有树叶阻挡的橘子作为example box，结果有所改观。</p><p>无适应的结果32.83.</p><p><img src="https://cdn.jsdelivr.net/gh/7dragonpig/PicGo@main/Pic/202404231536076.png" alt="image-20240423022025443"></p><p>有适应的结果33.86.</p><p><img src="https://cdn.jsdelivr.net/gh/7dragonpig/PicGo@main/Pic/202404231536231.png" alt="image-20240423022204435"></p><h4 id="换了一张更密集的羊群图片来测试，误差会更明显。"><a href="#换了一张更密集的羊群图片来测试，误差会更明显。" class="headerlink" title="换了一张更密集的羊群图片来测试，误差会更明显。"></a>换了一张更密集的羊群图片来测试，误差会更明显。</h4><p>原图：羊的数量为110左右。</p><p><img src="https://cdn.jsdelivr.net/gh/7dragonpig/PicGo@main/Pic/202404231536396.jpg" alt="sheep"></p><p><img src="https://cdn.jsdelivr.net/gh/7dragonpig/PicGo@main/Pic/202405012332757.png" alt="image-20240501233259616"></p><p>无适应47.16 -&gt;  有适应104.39</p><p><img src="https://cdn.jsdelivr.net/gh/7dragonpig/PicGo@main/Pic/202404231537339.png" alt="image-20240423023311195"></p><h2 id="在不适应的情况下对测试集进行test"><a href="#在不适应的情况下对测试集进行test" class="headerlink" title="在不适应的情况下对测试集进行test"></a>在不适应的情况下对测试集进行test<img src="https://cdn.jsdelivr.net/gh/7dragonpig/PicGo@main/Pic/202404231537571.png" alt="image-20240417191610766"></h2><h2 id="适应的情况下对-val-拆分进行test"><a href="#适应的情况下对-val-拆分进行test" class="headerlink" title="适应的情况下对 val 拆分进行test"></a>适应的情况下对 val 拆分进行test</h2><p>官方模型的test</p><p><img src="https://cdn.jsdelivr.net/gh/7dragonpig/PicGo@main/Pic/202404231537469.png" alt="image-20240423000244621"></p><p>我自己训练的152轮得到model，然后进行test<img src="https://cdn.jsdelivr.net/gh/7dragonpig/PicGo@main/Pic/202404231537347.png" alt="image-20240423000337218"></p><p><img src="https://cdn.jsdelivr.net/gh/7dragonpig/PicGo@main/Pic/202404231536568.png" alt="image-20240423000418865"></p><p>可以看到结果还是差一点。</p><blockquote><p>起初运行train.py的没看清epoch的default为1500，然后跑了12小时发现才150+轮，算了算实验室的四核GPU得跑五天五夜不止，于是就没跑完，效果还是次了一点。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>论文阅读</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>背景音乐添加,SEO,评论</title>
    <link href="/posts/ab48daca/"/>
    <url>/posts/ab48daca/</url>
    
    <content type="html"><![CDATA[<h2 id="背景音乐添加"><a href="#背景音乐添加" class="headerlink" title="背景音乐添加"></a>背景音乐添加</h2><p>这里参考作者的<a href="https://butterfly.js.org/posts/507c070f/">全局吸底Aplayer教程</a>，为方便后续自己查阅，特摘抄出来。</p><p>首先安装<code>hexo-tag-aplayer</code>插件,<a href="https://github.com/MoePlayer/hexo-tag-aplayer">官方github</a>；</p><p>博客根目录安装：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install --save hexo-tag-aplayer<br></code></pre></td></tr></tbody></table></figure><p>由于需要全局都插入aplayer和meting资源，为了防止插入重复的资源，需要把<code>asset_inject</code>设为<code>false</code></p><p>在hexo的配置文件中</p><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">aplayer:</span><br>  <span class="hljs-attr">meting:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">asset_inject:</span> <span class="hljs-literal">false</span><br></code></pre></td></tr></tbody></table></figure><p>在主题配置文件中，<code>enable</code>设为<code>true</code>和<code>per_page</code>设为<code>true</code></p><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># Inject the css and script (aplayer/meting)</span><br><span class="hljs-attr">aplayerInject:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">per_page:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></tbody></table></figure><p>然后把代码插入到页脚中</p><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">inject:</span><br>  <span class="hljs-attr">head:</span><br>  <span class="hljs-attr">bottom:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&lt;div</span> <span class="hljs-string">class="aplayer</span> <span class="hljs-literal">no</span><span class="hljs-string">-destroy"</span> <span class="hljs-string">data-id="000PeZCQ1i4XVs"</span> <span class="hljs-string">data-server="tencent"</span> <span class="hljs-string">data-type="artist"</span> <span class="hljs-string">data-fixed="true"</span> <span class="hljs-string">data-mini="true"</span> <span class="hljs-string">data-listFolded="false"</span> <span class="hljs-string">data-order="random"</span> <span class="hljs-string">data-preload="none"</span> <span class="hljs-string">data-autoplay="true"</span> <span class="hljs-string">muted&gt;&lt;/div&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>运行Hexo就可以看到网页左下角出现了Aplayer</p><p>最后，如果你想切换页面时，音乐不会中断。把主题配置文件的pjax设为true即可。</p><p>参数解释：</p><div class="table-container"><table><thead><tr><th>选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>data-id</td><td><strong>必须值</strong></td><td>歌曲 id / 播放列表 id / 相册 id / 搜索关键字</td></tr><tr><td>data-server</td><td><strong>必须值</strong></td><td>音乐平台: <code>netease</code>, <code>tencent</code>, <code>kugou</code>, <code>xiami</code>, <code>baidu</code></td></tr><tr><td>data-type</td><td><strong>必须值</strong></td><td><code>song</code>, <code>playlist</code>, <code>album</code>, <code>search</code>, <code>artist</code></td></tr><tr><td>data-fixed</td><td><code>false</code></td><td>开启固定模式</td></tr><tr><td>data-mini</td><td><code>false</code></td><td>开启迷你模式</td></tr><tr><td>data-loop</td><td><code>all</code></td><td>列表循环模式：<code>all</code>, <code>one</code>,<code>none</code></td></tr><tr><td>data-order</td><td><code>list</code></td><td>列表播放模式： <code>list</code>, <code>random</code></td></tr><tr><td>data-volume</td><td>0.7</td><td>播放器音量</td></tr><tr><td>data-lrctype</td><td>0</td><td>歌词格式类型</td></tr><tr><td>data-listfolded</td><td><code>false</code></td><td>指定音乐播放列表是否折叠</td></tr><tr><td>data-storagename</td><td><code>metingjs</code></td><td>LocalStorage 中存储播放器设定的键名</td></tr><tr><td>data-autoplay</td><td><code>true</code></td><td>自动播放，移动端浏览器暂时不支持此功能</td></tr><tr><td>data-mutex</td><td><code>true</code></td><td>该选项开启时，如果同页面有其他 aplayer 播放，该播放器会暂停</td></tr><tr><td>data-listmaxheight</td><td><code>340px</code></td><td>播放列表的最大长度</td></tr><tr><td>data-preload</td><td><code>auto</code></td><td>音乐文件预载入模式，可选项： <code>none</code>, <code>metadata</code>, <code>auto</code></td></tr><tr><td>data-theme</td><td><code>#ad7a86</code></td><td>播放器风格色彩设置</td></tr></tbody></table></div><hr><h2 id="SEO优化"><a href="#SEO优化" class="headerlink" title="SEO优化"></a>SEO优化</h2><h3 id="1-文章路径"><a href="#1-文章路径" class="headerlink" title="1 文章路径"></a>1 文章路径</h3><p>做了一些文章路径的优化，Hexo默认永久链接是 <code>:year/:month/:day/:title/</code>的格式，这样不美观，也不利于SEO。</p><p>在站点配置文件中修改：</p><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">permalink:</span> <span class="hljs-string">posts/:hash/</span> <span class="hljs-comment"># 我这里改成posts/:hash</span><br></code></pre></td></tr></tbody></table></figure><p>这样文章的路径就没有讨厌的年月日格式了。</p><h3 id="2-添加站点地图"><a href="#2-添加站点地图" class="headerlink" title="2 添加站点地图#"></a>2 添加站点地图<a href="https://www.cnblogs.com/yyyzyyyz/p/15542401.html#2-添加站点地图">#</a></h3><p>我这里使用的是<a href="https://github.com/ludoviclefevre/hexo-generator-seo-friendly-sitemap">hexo-generator-seo-friendly-sitemap</a>，生成网站地图。</p><p>网站地图是什么？</p><p>网站地图实际上就像是一个站点的导航文件。网站地图的重要性：</p><ul><li>搜索引擎每天都是让爬虫在互联网爬行来抓取页面，站点地图的作用就是给爬虫爬行构造了一个方便快捷的通道，因为网站页面是一层一层的链接的，其中可能会存在死链接的情况，如果没有站点地图，爬虫爬行在某个页面就因死链接爬行不了，那么就不能收录那些断链接的页面。</li><li>站点地图的存在不仅是满足搜索引擎爬虫的查看，更多是方便网站访客来浏览网站，特别是例如门户型网站由于信息量太多很多访客都是通过站点地图来寻找到自己需要的信息页面，这也能很好的提高用户体验度 。</li><li>站点地图可以提高链接页面的权重，因为站点地图是指向其他页面的链接，此时站点地图就给页面增加了导入链接，大家知道导入链接的增加会影响到页面的权重，从而提高页面的权重，页面权重的提高同时会提高页面的收录率。</li></ul><p>使用方法：</p><p>hexo根目录下安装：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-generator-seo-friendly-sitemap --save<br></code></pre></td></tr></tbody></table></figure><p>在Hexo站点配置文件添加：</p><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">sitemap:</span><br>    <span class="hljs-attr">path:</span> <span class="hljs-string">sitemap.xml</span><br>    <span class="hljs-attr">tag:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">category:</span> <span class="hljs-literal">false</span><br></code></pre></td></tr></tbody></table></figure><div class="table-container"><table><thead><tr><th>参数</th><th>解释</th></tr></thead><tbody><tr><td>path</td><td>索引地图的路径，保持默认就好</td></tr><tr><td>tag</td><td>false:标签页不添加到网站地图中（推荐）</td></tr><tr><td>category</td><td>false:分类页不添加到网站地图中（推荐）</td></tr></tbody></table></div><p>设置之后，网站地图就生成完毕了。</p><p>以我的站点为例，</p><p>网站地图索引：<a href="https://www.yyyzyyyz.cn/sitemap.xml">https://www.yyyzyyyz.cn/sitemap.xml</a></p><p>文章网站地图：<a href="https://www.yyyzyyyz.cn/post-sitemap.xml">https://www.yyyzyyyz.cn/post-sitemap.xml</a></p><p>页面网站地图：<a href="https://www.yyyzyyyz.cn/page-sitemap.xml">https://www.yyyzyyyz.cn/page-sitemap.xml</a></p><p>接下来，我们需要将生成的网站地图提交到<a href="https://www.google.com/webmasters/tools/dashboard">谷歌</a>、<a href="https://ziyuan.baidu.com/site/index">百度</a>、<a href="https://www.bing.com/webmasters/about?setlang=zh-cn">必应</a>等站点，注册账号，添加你的域名，然后复制刚才生成的网站地图上传。之后等待爬虫抓取就好了。下面是sitemap上传示例。</p><p>百度：</p><p><a href="https://cdn.jsdelivr.net/gh/hiltay/imgcdn/img/202111181932942.png"><img src="https://cdn.jsdelivr.net/gh/hiltay/imgcdn/img/202111181932942.png" alt="img"></a></p><p>必应：</p><p><a href="https://cdn.jsdelivr.net/gh/hiltay/imgcdn/img/202111181936703.png"><img src="https://cdn.jsdelivr.net/gh/7dragonpig/PicGo@main/Pic/202404281808741.png" alt="img"></a></p><p>谷歌：</p><p>关于谷歌，有能力的同学可以尝试一下。</p><p><a href="https://cdn.jsdelivr.net/gh/hiltay/imgcdn/img/202111181939799.png"><img src="https://cdn.jsdelivr.net/gh/7dragonpig/PicGo@main/Pic/202404281808411.png" alt="img"></a></p><h3 id="3-自动推送"><a href="#3-自动推送" class="headerlink" title="3 自动推送#"></a>3 自动推送<a href="https://www.cnblogs.com/yyyzyyyz/p/15542401.html#3-自动推送">#</a></h3><p>使用<a href="https://github.com/cjh0613/hexo-submit-urls-to-search-engine">hexo-submit-urls-to-search-engine</a>插件，每次<code>hexo -d</code>时，可自动推送Hexo博客新链接至<a href="https://www.google.com/webmasters/tools/dashboard">谷歌</a>、<a href="https://ziyuan.baidu.com/site/index">百度</a>、<a href="https://www.bing.com/webmasters/about?setlang=zh-cn">必应</a>搜索引擎站长平台以提升网站收录质量和速度。解放双手，一劳永逸。</p><p>首先在本地hexo根目录下安装：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install --save hexo-submit-urls-to-search-engine<br></code></pre></td></tr></tbody></table></figure><p>获取站长平台API token，关于这部分内容，官方文档有详细介绍，<a href="https://cjh0613.com/20200603HexoSubmitUrlsToSearchEngine">点击查看</a></p><p>假设你已经阅读了官方文档，并且获得了token。获取token之后，Hexo站点配置文件添加：</p><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">hexo_submit_urls_to_search_engine:</span><br>  <span class="hljs-attr">submit_condition:</span> <span class="hljs-string">count</span> <span class="hljs-comment">#链接被提交的条件，可选值：count | period 现仅支持count</span><br>  <span class="hljs-attr">count:</span> <span class="hljs-number">10</span> <span class="hljs-comment"># 提交最新的10个链接</span><br>  <span class="hljs-attr">period:</span> <span class="hljs-number">900</span> <span class="hljs-comment"># 提交修改时间在 900 秒内的链接</span><br>  <span class="hljs-attr">google:</span> <span class="hljs-number">0</span> <span class="hljs-comment"># 是否向Google提交，可选值：1 | 0（0：否；1：是）</span><br>  <span class="hljs-attr">bing:</span> <span class="hljs-number">1</span> <span class="hljs-comment"># 是否向bing提交，可选值：1 | 0（0：否；1：是）</span><br>  <span class="hljs-attr">baidu:</span> <span class="hljs-number">1</span> <span class="hljs-comment"># 是否向baidu提交，可选值：1 | 0（0：否；1：是）</span><br>  <span class="hljs-attr">txt_path:</span> <span class="hljs-string">submit_urls.txt</span> <span class="hljs-comment">## 文本文档名， 需要推送的链接会保存在此文本文档里</span><br>  <span class="hljs-attr">baidu_host:</span> <span class="hljs-string">https://cjh0613.github.io</span> <span class="hljs-comment">## 在百度站长平台中注册的域名</span><br>  <span class="hljs-attr">baidu_token:</span> <span class="hljs-string">请按照文档说明获取</span> <span class="hljs-comment">## 请注意这是您的秘钥， 所以请不要把它直接发布在公众仓库里!</span><br>  <span class="hljs-attr">bing_host:</span> <span class="hljs-string">https://cjh0613.github.io</span> <span class="hljs-comment">## 在bing站长平台中注册的域名</span><br>  <span class="hljs-attr">bing_token:</span> <span class="hljs-string">请按照文档说明获取</span> <span class="hljs-comment">## 请注意这是您的秘钥， 所以请不要把它直接发布在公众仓库里!</span><br>  <span class="hljs-attr">google_host:</span> <span class="hljs-string">https://cjh0613.github.io</span> <span class="hljs-comment">## 在google站长平台中注册的域名</span><br>  <span class="hljs-attr">google_key_file:</span> <span class="hljs-string">Project.json</span> <span class="hljs-comment">#存放google key的json文件，放于网站根目录（与hexo _config.yml文件位置相同），请不要把json文件内容直接发布在公众仓库里!</span><br>  <span class="hljs-attr">google_proxy:</span> <span class="hljs-string">http://127.0.0.1:8080</span> <span class="hljs-comment"># 向谷歌提交网址所使用的系统 http 代理，填 0 不使用</span><br>  <span class="hljs-attr">replace:</span> <span class="hljs-number">0</span>  <span class="hljs-comment"># 是否替换链接中的部分字符串，可选值：1 | 0（0：否；1：是）</span><br>  <span class="hljs-attr">find_what:</span> <br>  <span class="hljs-attr">replace_with:</span> <br></code></pre></td></tr></tbody></table></figure><p>关于谷歌，如果不想提交到谷歌，设置<code>google</code>和<code>google_proxy</code>为<code>0</code>。</p><p>配置完成。</p><p>接下来只需要<code>hexo clean &amp;&amp; hexo generate &amp;&amp; hexo deploy</code>即可。</p><p>如果推送成功，你会看到如下消息：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash">Bing response:  { d: null }<br>Bing response:  { d: null }<br>Bing response:  { d: null }<br>Bing response:  { d: null }<br>Bing response:  { d: null }<br>Bing response:  { d: null }<br>Bing response:  { d: null }<br>Bing response:  { d: null }<br>Baidu response:  {<span class="hljs-string">"remain"</span>:2992,<span class="hljs-string">"success"</span>:8}<br>Google response:  {<br>  urlNotificationMetadata: {<br>    url: <span class="hljs-string">'https://www.yyyzyyyz.cn/posts/25075e302733/'</span>,<br>    latestUpdate: {<br>      url: <span class="hljs-string">'https://www.yyyzyyyz.cn/posts/25075e302733/'</span>,<br>      <span class="hljs-built_in">type</span>: <span class="hljs-string">'URL_UPDATED'</span>,<br>      notifyTime: <span class="hljs-string">'2021-11-18T11:16:27.108920085Z'</span><br>    }<br>  }<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="4-添加robots-txt"><a href="#4-添加robots-txt" class="headerlink" title="4 添加robots.txt#"></a>4 添加robots.txt<a href="https://www.cnblogs.com/yyyzyyyz/p/15542401.html#4-添加robotstxt">#</a></h3><p>关于robots协议，可以查看我的<a href="https://www.cnblogs.com/yyyzyyyz/p/15543808.html#2-robots协议">这篇博客</a>，简单来说就是可以指定搜索引擎爬虫可以抓取什么内容、不可以抓取什么内容。</p><p>这些网站可以在线生成<code>robots.txt</code>任选一个即可：<a href="https://www.qtool.net/robots">tool在线生成</a>，<a href="https://tool.chinaz.com/robots/">ChinaZ在线生成</a>，<a href="https://www.qvdv.com/tools/qvdv-robots.html">dqdv在线生成</a>，<a href="https://www.w3cschool.cn/tools/index?name=createrobots">w3cschool在线生成</a></p><p>复制生成的内容，新建一个<code>robots.txt</code>将内容粘贴进去，然后将它上传至网站根目录下。</p><p>可以在这里验证你的文件是否生效：<a href="http://s.tool.chinaz.com/robots/">验证robots</a></p><h3 id="5-添加rel"><a href="#5-添加rel" class="headerlink" title="5 添加rel#"></a>5 添加rel<a href="https://www.cnblogs.com/yyyzyyyz/p/15542401.html#5-添加rel">#</a></h3><p>为网站使用到的所有外链添加<code>rel="noopener external nofollow noreferrer"</code>, 可以有效地加强网站SEO和防止权重流失。<a href="https://github.com/JLHwung/hexo-offline">github</a></p><p>hexo博客根目录安装：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm i hexo-filter-nofollow --save<br></code></pre></td></tr></tbody></table></figure><p>然后在配置文件添加：</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">nofollow:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">field:</span> <span class="hljs-string">site</span><br></code></pre></td></tr></tbody></table></figure><hr><h2 id="添加评论"><a href="#添加评论" class="headerlink" title="添加评论"></a>添加评论</h2><p>最开始使用的是utterances，现在改为Twikoo</p><p>具体配置参见：<a href="https://twikoo.js.org/">Twikoo</a></p><p>我使用的是<code>Vercel部署</code>，主要是因为免费。作者为我们提供了视频的部署教程，<a href="https://www.bilibili.com/video/BV1Fh411e7ZH">点击查看</a></p><p>我为了偷懒，Vercel使用github登录， MongoDB使用google帐号登录。</p><h3 id="补充说明"><a href="#补充说明" class="headerlink" title="补充说明#"></a>补充说明<a href="https://www.cnblogs.com/yyyzyyyz/p/15542401.html#补充说明">#</a></h3><p>这里补充几点：</p><blockquote><p>mongodb+srv://7dragonpig:qi6272727@7dragonpig.peah4wi.mongodb.net/?retryWrites=true&amp;w=majority&amp;appName=7dragonpig</p><p>envId: <a href="https://twikoo-api-smoky-phi.vercel.app">https://twikoo-api-smoky-phi.vercel.app</a></p></blockquote><ul><li>配置文件的修改在<code>MONGODB</code>控制台中，点击<code>Browse Collections</code></li></ul><p><a href="https://img2020.cnblogs.com/blog/1213116/202111/1213116-20211117174907146-1505057394.png"><img src="https://cdn.jsdelivr.net/gh/7dragonpig/PicGo@main/Pic/202404281811430.png" alt="image"></a></p><ul><li><p>关于代码高亮，需要在配置中配置<code>HIGHLIGHT:true</code></p><p>语法：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">pre</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">code</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"language-css"</span>&gt;</span>p { color: red }<span class="hljs-tag">&lt;/<span class="hljs-name">code</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">pre</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>其中<code>class="language-css"</code>换成需要的语言。</p><p>另外twikoo支持md语法，所以直接使用md语法添加代码块同样可行。</p></li></ul><h2 id="利用企业微信实现twikoo新消息提醒："><a href="#利用企业微信实现twikoo新消息提醒：" class="headerlink" title="利用企业微信实现twikoo新消息提醒："></a>利用企业微信实现twikoo新消息提醒：</h2><p>文章参考：</p><ul><li><a href="https://guole.fun/posts/626/">搭建微信通知 API 实现 Twikoo 新消息提醒</a></li><li><a href="https://lucheng.xyz/2022/01/09/wechat-message-vercel/">微信通知Twikoo新消息提醒（Vercel版本）</a></li><li><a href="https://blog.zhheo.com/p/1e9f35bc.html">微信菌：利用企业微信搭建微信消息提醒API</a></li></ul><p>操作步骤如下：</p><h3 id="1-注册企业微信"><a href="#1-注册企业微信" class="headerlink" title="1 注册企业微信#"></a>1 注册企业微信<a href="https://www.cnblogs.com/yyyzyyyz/p/15542401.html#1-注册企业微信">#</a></h3><p>进入<a href="https://work.weixin.qq.com/">企业微信</a>创建一个企业。每个普通用户都可以创建企业，不需要很麻烦，但是需要填写一些基本信息。</p><h3 id="2-企业微信创建应用"><a href="#2-企业微信创建应用" class="headerlink" title="2 企业微信创建应用#"></a>2 企业微信创建应用<a href="https://www.cnblogs.com/yyyzyyyz/p/15542401.html#2-企业微信创建应用">#</a></h3><p>在 “企业微信 —— 应用管理” 底部的 “自建” 应用处，新建一个 “应用”。<br><a href="https://img2020.cnblogs.com/blog/1213116/202201/1213116-20220110130234368-83623502.png"><img src="https://img2020.cnblogs.com/blog/1213116/202201/1213116-20220110130234368-83623502.png" alt="image"></a></p><p>创建完成后，记录下应用页面的<code>AgentId</code>和<code>Secret</code>。查看<code>Secret</code>需要安装一个企业微信，查看完可以卸载。</p><p>在 “企业微信 —— 我的企业” 底部，记录下 <a href="https://work.weixin.qq.com/wework_admin/frame#profile">企业 ID</a>。</p><h3 id="3-部署-API-云函数"><a href="#3-部署-API-云函数" class="headerlink" title="3 部署 API 云函数#"></a>3 部署 API 云函数<a href="https://www.cnblogs.com/yyyzyyyz/p/15542401.html#3-部署-api-云函数">#</a></h3><p>我之前使用vercel部署过twikoo，因此不需要再创建新的云函数。如果你不是使用vercel，<a href="https://blog.zhheo.com/p/1e9f35bc.html#使用vercel开发搭建教程（推荐）">参考这里</a></p><p>找到你的twikoo github仓库，clone到本地，进入<code>api/</code>，执行以下命令：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">pip install pipenv<br>pipenv install requests<br></code></pre></td></tr></tbody></table></figure><p>然后在该目录创建一个<code>python.py</code>文件，内容如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> http.server <span class="hljs-keyword">import</span> BaseHTTPRequestHandler<br><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> urllib.parse <span class="hljs-keyword">import</span> parse_qs<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">handler</span>(<span class="hljs-title class_ inherited__">BaseHTTPRequestHandler</span>):<br>    <br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">do_GET</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">getTocken</span>(<span class="hljs-params"><span class="hljs-built_in">id</span>, secert, msg, agentId</span>):<br>            url = <span class="hljs-string">"https://qyapi.weixin.qq.com/cgi-bin/gettoken?corpid="</span> + \<br>                <span class="hljs-built_in">id</span> + <span class="hljs-string">"&amp;corpsecret="</span> + secert<br><br>            r = requests.get(url)<br>            tocken_json = json.loads(r.text)<br>            <span class="hljs-comment"># print(tocken_json['access_token'])</span><br>            sendText(tocken=tocken_json[<span class="hljs-string">'access_token'</span>], agentId=agentId, msg=msg)<br><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">sendText</span>(<span class="hljs-params">tocken, agentId, msg</span>):<br>            sendUrl = <span class="hljs-string">"https://qyapi.weixin.qq.com/cgi-bin/message/send?access_token="</span> + tocken<br>            <span class="hljs-comment"># print(sendUrl)</span><br>            data = json.dumps({<br>                <span class="hljs-string">"safe"</span>: <span class="hljs-number">0</span>,<br>                <span class="hljs-string">"touser"</span>: <span class="hljs-string">"@all"</span>,<br>                <span class="hljs-string">"msgtype"</span>: <span class="hljs-string">"text"</span>,<br>                <span class="hljs-string">"agentid"</span>: agentId,<br>                <span class="hljs-string">"text"</span>: {<br>                    <span class="hljs-string">"content"</span>: <span class="hljs-built_in">str</span>(msg)<br>                }<br>            })<br>            requests.post(sendUrl, data)<br>            <br>        <span class="hljs-keyword">try</span>:<br>            params = parse_qs(self.path[<span class="hljs-number">12</span>:])<br>            apiid = params[<span class="hljs-string">'id'</span>][<span class="hljs-number">0</span>]<br>            apisecert = params[<span class="hljs-string">'secert'</span>][<span class="hljs-number">0</span>]<br>            apiagentId = params[<span class="hljs-string">'agentId'</span>][<span class="hljs-number">0</span>]<br>            apimsg = params[<span class="hljs-string">'msg'</span>][<span class="hljs-number">0</span>]<br>        <span class="hljs-keyword">except</span>:<br>            apimsg = self.path<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-comment">#try:</span><br>            <span class="hljs-comment"># 执行主程序</span><br>            getTocken(<span class="hljs-built_in">id</span>=apiid, secert=apisecert,<br>                        msg=apimsg, agentId=apiagentId)<br>            <span class="hljs-comment">#except:</span><br>            <span class="hljs-comment">#    status = 1</span><br>            <span class="hljs-comment">#    apimsg = '主程序运行时出现错误，请检查参数是否填写正确。详情可以参阅：https://blog.zhheo.com/p/1e9f35bc.html'</span><br>            <span class="hljs-comment">#else:</span><br>            <span class="hljs-comment">#    status = 0</span><br>        <span class="hljs-comment"># print(event)</span><br>        <span class="hljs-comment"># print("Received event: " + json.dumps(event, indent = 2))</span><br>        <span class="hljs-comment"># print("Received context: " + str(context))</span><br>        <span class="hljs-comment"># print("Hello world")</span><br><br>        self.send_response(<span class="hljs-number">200</span>)<br>        self.send_header(<span class="hljs-string">'Content-type'</span>, <span class="hljs-string">'text/plain'</span>)<br>        self.end_headers()<br>        self.wfile.write(apimsg)<br>        <span class="hljs-keyword">return</span><br></code></pre></td></tr></tbody></table></figure><p>注意文件名命名必须是<code>python.py</code> 否则你可能需要更改获取query parameters部分的代码。</p><p>将改动push到远程仓库，等待一会，vercel会自动部署。当Vercel完成部署后，可以使用下面这样的方式，拼接一个 URL，浏览器访问，看看手机微信能不能接收到消息。</p><p>API参数：</p><div class="table-container"><table><thead><tr><th>参数</th><th>类型</th><th>必选</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>id</td><td>str</td><td>true</td><td>企业微信公司id</td><td><code>ww42a2d7**********</code></td></tr><tr><td>secert</td><td>str</td><td>true</td><td>企业微信应用的应用secert</td><td><code>xD_*****_6hVymgTBZuTaZviu9i3P4Xd6**********</code></td></tr><tr><td>agentId</td><td>int</td><td>true</td><td>企业微信应用的应用agentId</td><td><code>1000003</code></td></tr><tr><td>msg</td><td>str</td><td>true</td><td>需要发送的内容</td><td>helloworld</td></tr></tbody></table></div><p>完整的url如下所示：</p><figure class="highlight http"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">https://&lt;vercel_app_address&gt;/api/python?id=&lt;企业id&gt;&amp;secert=&lt;secret&gt;&amp;agentId=&lt;agentId&gt;&amp;msg=测试一下吧<br></code></pre></td></tr></tbody></table></figure><p>将上述url的内容替换成你的信息。其中，<code>vercel_app_address</code>可以在vercel应用界面查看，如下图：<br><a href="https://img2020.cnblogs.com/blog/1213116/202201/1213116-20220110130245213-555805002.png"><img src="https://img2020.cnblogs.com/blog/1213116/202201/1213116-20220110130245213-555805002.png" alt="image"></a></p><p>测试一下你的访问路径是否有效，如果能收到消息就说明成功。</p><h3 id="4-在twikoo中配置"><a href="#4-在twikoo中配置" class="headerlink" title="4 在twikoo中配置#"></a>4 在twikoo中配置<a href="https://www.cnblogs.com/yyyzyyyz/p/15542401.html#4-在twikoo中配置">#</a></h3><p>在twikoo后台管理<code>WECOM_API_URL</code>中添加你拼接的url即可。</p><p>注意<code>msg</code>后面不要有参数：</p><figure class="highlight http"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">https://&lt;vercel_app_address&gt;/api/python?id=&lt;企业id&gt;&amp;secert=&lt;secret&gt;&amp;agentId=&lt;agentId&gt;&amp;msg=<br></code></pre></td></tr></tbody></table></figure><p><a href="https://img2020.cnblogs.com/blog/1213116/202201/1213116-20220110130252160-766949776.png"><img src="https://cdn.jsdelivr.net/gh/7dragonpig/PicGo@main/Pic/202404281811486.png" alt="image"></a></p><h3 id="5-在微信中接收企业微信消息"><a href="#5-在微信中接收企业微信消息" class="headerlink" title="5 在微信中接收企业微信消息#"></a>5 在微信中接收企业微信消息<a href="https://www.cnblogs.com/yyyzyyyz/p/15542401.html#5-在微信中接收企业微信消息">#</a></h3><p>在“企业微信——我的企业——微信插件”页面配置，<a href="https://work.weixin.qq.com/wework_admin/frame#profile/wxPlugin">点击这里查看</a>。</p><p>使用微信扫码，关注你的企业微信，并且在设置中打开<code>允许成员在微信插件中接收和回复聊天消息</code>选项。</p><p><a href="https://img2020.cnblogs.com/blog/1213116/202201/1213116-20220110130305008-496462349.png"><img src="https://cdn.jsdelivr.net/gh/7dragonpig/PicGo@main/Pic/202404281811238.png" alt="image"></a></p><p>大功告成！现在，使用一个非博主的邮箱，去评论一条试试吧。</p>]]></content>
    
    
    <categories>
      
      <category>blog优化</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo写博客和Hexo Admin管理</title>
    <link href="/posts/cd5ebc21/"/>
    <url>/posts/cd5ebc21/</url>
    
    <content type="html"><![CDATA[<h1 id="Hexo写博客和Hexo-Admin管理"><a href="#Hexo写博客和Hexo-Admin管理" class="headerlink" title="Hexo写博客和Hexo Admin管理"></a>Hexo写博客和Hexo Admin管理</h1><ol><li>原始方法</li></ol><p>在我们放置博客文件的文件夹Hexo中，source/_posts/目录下存放着所有博文的Markdown文件，初始化只有一个hello-world.md文件。<br>我们可以在Git Bash中创建新博文：</p><figure class="highlight gauss"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss">hexo <span class="hljs-keyword">new</span> &lt;<span class="hljs-built_in">title</span>&gt;<br></code></pre></td></tr></tbody></table></figure><p>在_posts目录下会生成相应的.md文件，接下来我们可以编辑该文件，直接写博文啦。（注意使用Markdown语法）  </p><p><img src="https://cdn.jsdelivr.net/gh/7dragonpig/PicGo@main/Pic/202404261641116.webp" alt=""></p><p>写完博文后，执行即可在博客中更新。</p><figure class="highlight ebnf"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo g</span><br><span class="hljs-attribute">hexo d</span><br></code></pre></td></tr></tbody></table></figure><p>如果要删除博文，则直接把_posts目录下相应的.md文件删除，再执行上述命令即可。<br>PS：关于在博文中插入图片,可以把图片统一放置在source/images目录下，然后在使用时用下述方式引用。</p><figure class="highlight scss"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">!<span class="hljs-selector-attr">[]</span>(/images/image.jpg)<br></code></pre></td></tr></tbody></table></figure><p>更多相关的操作，可以查看Hexo的<a href="https://hexo.io/zh-cn/docs/writing">官网</a>。</p><h2 id="2-Hexo-Admin插件管理"><a href="#2-Hexo-Admin插件管理" class="headerlink" title="2. Hexo Admin插件管理"></a>2. Hexo Admin插件管理</h2><p>可以看出，用原生的方法来管理博文十分的不便，因此便有了Hexo Admin这一插件来方便我们的操作。 </p><ul><li>首先，安装插件。</li></ul><figure class="highlight ada"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install <span class="hljs-comment">--save hexo-admin</span><br></code></pre></td></tr></tbody></table></figure><ul><li>启动服务器。</li></ul><figure class="highlight axapta"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">hexo <span class="hljs-keyword">server</span> -d<br></code></pre></td></tr></tbody></table></figure><p>即可在==localhost:4000/admin/==中编辑博文了。</p><p><img src="https://cdn.jsdelivr.net/gh/7dragonpig/PicGo@main/Pic/202404261643903.webp" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/7dragonpig/PicGo@main/Pic/202404261643244.webp" alt=""></p><p>然后，Deploy之前，还需要编辑配置文件_config.yml。(否则会出现Error: Config value “admin.deployCommand” not found或者Error: spawn hexo ENOENT之类的报错。)<br>如果是Windows则在末尾加上  </p><p><img src="https://cdn.jsdelivr.net/gh/7dragonpig/PicGo@main/Pic/202404261644556.webp" alt=""></p><p>然后在同级目录新建<code>hexo-pubish.bat</code>文件，文件内容如下：</p><figure class="highlight ebnf"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo g -d</span><br></code></pre></td></tr></tbody></table></figure><p>如果是Linux系统则参考<a href="https://github.com/jaredly/hexo-admin/issues/70">Issues</a>。<br>编辑完毕后，就可以点击Deploy，直接部署发布Github博客上。  </p><p><img src="https://cdn.jsdelivr.net/gh/7dragonpig/PicGo@main/Pic/202404261644593.webp" alt=""></p><ul><li>PS：关于Hexo Admin插入图片<br>Hexo Admin可以直接复制图片粘贴，然后自动下载到source/images目录并重命名。但在Windows中粘贴后会出现裂图。这时就需要手动把括号中的前后两个斜杠去掉，就能正常显示。  </li></ul><p><img src="https://cdn.jsdelivr.net/gh/7dragonpig/PicGo@main/Pic/202404261644525.webp" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/7dragonpig/PicGo@main/Pic/202404261645296.webp" alt=""></p><p>但是它那个GUI里的DEPLOY点了总是失败，我个人还是不太建议用这个。</p><blockquote><p>本文参考 <a href="https://www.jianshu.com/p/ee47432c7e37">https://www.jianshu.com/p/ee47432c7e37</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>踩坑日记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
